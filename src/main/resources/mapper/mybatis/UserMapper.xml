<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<!-- User의 Level은 enum, User의 Level 필드의 명은 level이고, DB 저장 값은 Level.value이므로, level.value와 같이 저장 -->
<mapper namespace="mapper.mybatis.UserMapper">

    <resultMap id="resultUser" type="com.tobsec.model.User" >
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="password" property="password" />
        <!-- Enum 변환 -->
        <result column="level" property="level" 
            typeHandler="com.tobsec.model.handler.LevelOnlyHandler"
        />
        <result column="login" property="login" />
        <result column="recommend" property="recommend" />
        <result column="email" property="email" />
        <result column="recid" property="recid" />
        <collection property="boardList" ofType="Board">
            <id column="board_no" property="boardNo" />
            <result column="content" property="content" />
            <result column="board_gubun" property="boardGubun" />
            <result column="write_time" property="writeTime" javaType="java.sql.Timestamp" />
        </collection>
    </resultMap>

    <insert id="addUser" parameterType="User" >
        Insert Into User 
        (id, name, password, level, login, recommend, email, recid) 
        Values 
        (#{id}, #{name}, #{password}, #{level.value}, #{login}, #{recommend}, #{email}, #{recid})
    </insert>

    <update id="updateUser" parameterType="User">
        Update User 
           Set name = #{name}
             , email = #{email}
        Where id = #{id}
    </update>

    <delete id="deleteUser" parameterType="String">
        Delete From USER Where id = #{id}
    </delete>

    <delete id="deleteUserAll">
        Delete From USER
    </delete>

    <select id="countUserOption" resultType="int">
        Select Count(*) As cnt From USER Where 1 = 1  
        ${option}
    </select>

    <select id="selectUserOption" resultMap="resultUser" >
        Select * 
        From USER 
        Where 1 = 1  
        ${option}
    </select>

    <select id="countAllUser" resultType="int">
        Select Count(*) As cnt From USER
    </select>

    <select id="countUser" resultType="int" parameterType="string">
        Select Count(*) As cnt From USER Where id = #{id}
    </select>

    <select id="getUser" resultMap="resultUser" parameterType="string">
        Select a.*, b.* 
        From USER a
        Left Outer Join BOARD b On (b.writer_id = a.id)
        Where a.id = #{id}
    </select>

    <select id="selectUserAll" resultMap="resultUser">
        Select *
        From USER
        Order By id
    </select>

    <update id="upgradeLevel" parameterType="User">
        Update User 
        Set level = #{level, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler} 
        Where id = #{id}
    </update>

    <update id="plusLogin" parameterType="User">
        Update User 
        Set login = #{login}
        Where id = #{id}
    </update>

    <update id="plusRecommend" parameterType="User">
        Update User 
        Set recommend = #{recommend}
        Where id = #{id}
    </update>
    
    <update id="checkedRecommend" parameterType="User">
        Update User 
        Set recid = #{recid}
        Where id = #{id}
    </update>
    <!--
        순서가 유지되어 있다면, 이걸로 가능함. 순서가 반대로 되어 있을 경우 맞지 않음
        하나 만드는게 옳을 것 같음.
        #{level, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler} 
    -->
</mapper>