<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.0.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-4.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
                           http://mybatis.org/schema/mybatis-spring
                           http://mybatis.org/schema/mybatis-spring.xsd
                           http://www.springframework.org/schema/data/jpa
                           http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                           "
>
    <!-- @Aspect어노테이션이 있는 클래스를 자동으로 찾아서 설정해줌 -->
    <aop:aspectj-autoproxy/>
    
    <!-- 
    <bean class="org.springframework.transaction.aspectj.AnnotationTransactionAspect" factory-method="aspectOf">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <context:load-time-weaver aspectj-weaving="on" />

    <tx:annotation-driven transaction-manager="transactionManager" mode="aspectj" proxy-target-class="true"  />
    -->

    <bean class="com.tobsec.common.AccessAdvice" />

    <tx:annotation-driven  />
    
    <jdbc:embedded-database id="embeddedDataSource" type="H2">
		<jdbc:script location="classpath:sqlconfig/create-db.sql" />
	</jdbc:embedded-database>
    
    <!-- TransactionManager의 이름이 transactionManager라면 transaction-manager 속성 생략 가능 -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="count*" read-only="true" />
            <tx:method name="select*" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <bean id="duringAdvice" class="com.tobsec.service.DuringTimeAdvice" />

    <aop:config>
        <aop:pointcut id="servicePoint" expression="execution(* com.tobsec.service.*ServiceImpl.*(..))" />

        <!-- pointcut-ref인 경우 pointcut 객체(Customizing), ref가 안 붙으면 포인트컷 표현식 -->
        <aop:advisor advice-ref="txAdvice" pointcut="bean(confirmService)" />

        <aop:aspect id="measureAspect" ref="duringAdvice" order="0">
            <aop:around pointcut-ref="servicePoint" method="measure" />
        </aop:aspect>

        <aop:aspect id="throwingAspect" ref="duringAdvice" order="39">
            <aop:after-throwing pointcut-ref="servicePoint" method="afterThrowing" throwing="excep" />
        </aop:aspect>
    </aop:config>

    <context:component-scan base-package="com.tobsec">
        <context:exclude-filter type="annotation" expression="org.springframework.context.annotation.Configuration" />
    </context:component-scan>

    <!-- Mybatis, JDBC 용 -->
    <!-- 
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    -->

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 
        <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
        -->
        <property name="persistenceUnitName" value="toby_persistence" />
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="true" />
            </bean>
        </property>
        <property name="packagesToScan" value="com.tobsec.model" />
        
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.id.new_generator_mappings">true</prop>
                <prop key="hibernate.use_sql_comments">true</prop>
            </props>
        </property>
    </bean>
    <!-- 
    <jpa:repositories base-package="com.tobsec.dao" />
    -->
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="targetDataSource" />
    </bean>
    
    <bean id="sqlService" class="com.tobsec.service.sql.SqlServiceImpl" />

    <bean id="sqlReader" class="com.tobsec.service.sql.reader.GensonSqlReader">
        <property name="configFile" value="sqlconfig/sqlMap.json" />
    </bean>

    <bean id="sqlRegistry" class="com.tobsec.service.sql.registry.HashMapSqlRegistry" />
    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <!-- MyBatis 연동용 Bean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- Alias -->
        <property name="typeAliasesPackage" value="com.tobsec.model" />
        <!-- Mapper 경로 지정 mapper/mybatis 패키지 및 모든 서브 패키지의 xml 파일 탐색 -->
        <property name="mapperLocations" value="classpath*:mapper/mybatis/**/*.xml" />
    </bean>

    <!-- User Level UP 전략 -->
    <bean id="levelUpStrategy" class="com.tobsec.service.StrategyFactory"
        factory-method="defaultStrategy"
    />

    <util:properties id="serviceProps" location="classpath:serviceKeyconfig.properties" />
</beans>